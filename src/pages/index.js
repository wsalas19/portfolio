import Head from "next/head";
import NewsCard from "@/components/NewsCard";
import {
	Box,
	Flex,
	Grid,
	GridItem,
	Heading,
	HStack,
	Icon,
	IconButton,
	Image,
	Input,
	Tag,
	Text,
	useToast,
	VStack,
} from "@chakra-ui/react";
import { NEXT_URL } from "@/config/config";
import { BsTerminal } from "react-icons/bs";
import ProjectCard from "@/components/ProjectCard";
import { useState } from "react";
import { MdKeyboardArrowRight, MdKeyboardArrowLeft } from "react-icons/md";
import { supabase } from "@/config/supabase";
import { FaNodeJs, FaReact } from "react-icons/fa";
import {
	SiCss3,
	SiExpress,
	SiGit,
	SiHtml5,
	SiJavascript,
	SiMongodb,
	SiNextdotjs,
	SiRedux,
	SiSequelize,
	SiTypescript,
} from "react-icons/si";
import { useWindowSize } from "@/hooks/useWindowSize";
export default function Home({ url, projects, news }) {
	const toast = useToast();
	const scrollIndex = 400;
	const iconSize = 10;
	const projectsLength = (projects.length - 2) * 255;
	const [scroll, setScroll] = useState(0);
	const [command, setCommand] = useState("");

	const slideRight = () => {
		return scroll <= -projectsLength ? null : setScroll((state) => state - scrollIndex);
	};
	const slideLeft = () => {
		return scroll === 0 ? null : setScroll((state) => state + scrollIndex);
	};

	const styleSlide = {
		transform: `translateX(${scroll}px)`,
		marginLeft: `${projects.length === 0 || projects.length < 6 ? "inherit" : "auto"}`,
		marginRight: `${projects.length === 0 ? "inherit" : "auto"}`,
		transition: "transform 330ms ease-in-out",
	};

	const runCommand = async (line) => {
		if (line === "npm run dev") {
			const { data, error } = await supabase.storage.from("docs").download("WASB_CV_ENG.pdf");
			const url = window.URL.createObjectURL(new Blob([data]));
			setCommand("");
			const link = document.createElement("a");
			link.href = url;
			link.setAttribute("download", "WASB_CV_ENG.pdf");
			document.body.appendChild(link);
			link.click();
			toast({
				title: `File downloaded successfully`,
				status: "success",
				isClosable: true,
			});
		} else {
			toast({
				title: `Oops! Wrong command. Please try again`,
				status: "error",
				isClosable: true,
			});
			return;
		}
	};
	const handleCommand = (e) => {
		if (e.key === "Enter") {
			runCommand(command);
		} else {
			return;
		}
	};
	//modified

	const { size: windowSize } = useWindowSize();
	const breakPoint = 1339;
	return (
		<>
			<Head>
				<title>Portfolio - Home</title>
				<meta name='index page' content='Generated by create next app' />
				<meta name='viewport' content='width=device-width, initial-scale=1' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<Box id='aboutme' className='mainContainer ' bg={"#323232"}>
				<Grid
					className='dashboardContainer'
					gridTemplateColumns={windowSize.width <= breakPoint ? "1fr" : "repeat(4, 1fr)"}
					gridTemplateRows={windowSize.width <= breakPoint ? "20%" : "repeat(2, 1fr)"}
					gridTemplateAreas={
						windowSize.width <= breakPoint ? '"a" "b" "c" "d" "e"' : '"a b b c" "d d e c"'
					}
					rowGap={"3"}
					columnGap={"3"}
					p={"5"}
				>
					<GridItem border={"solid 1px grey"} borderRadius={"10px"} gridArea={"a"}>
						<Flex
							className='imageText'
							flexDirection={"column"}
							justifyContent={"center"}
							alignItems={"center"}
							p={3}
						>
							<Image
								fallbackSrc='https://via.placeholder.com/300'
								className='mainImage'
								padding={8}
								rounded={"full"}
								objectFit={"contain"}
								src={url}
								alt='me'
								boxSize={["70%", "62%"]}
							/>
							<Heading className='name' size={"md"} textAlign={"center"} color={"white"}>
								William Salas Bola√±o
							</Heading>
							<HStack justifyContent={"center"} wrap={"wrap"} gap={1}>
								<Tag display={"flex"} size={"sm"}>
									Full Stack Dev
								</Tag>
								<Tag size={"sm"} colorScheme={"blue"}>
									React.js
								</Tag>
								<Tag size={"sm"} colorScheme={"green"}>
									Node.js
								</Tag>
								<Tag size={"sm"} colorScheme={"yellow"}>
									Javascript
								</Tag>
							</HStack>
						</Flex>
					</GridItem>
					<GridItem
						border={"solid 1px grey"}
						borderRadius={"10px"}
						gridArea={"b"}
						overflow={"hidden"}
						bg={"#121212"}
					>
						<Flex flexDir={"column"}>
							<Flex
								px={2}
								justifyContent={"space-between"}
								bg={"#212121"}
								borderBottom={"solid 1px grey"}
								alignItems={"center"}
								h={"19px"}
							>
								<BsTerminal color='white' />
								<Flex alignItems={"center"} gap={2}>
									<Box rounded={"full"} w={"10px"} h={"10px"} bg={"#F75D59"}></Box>
									<Box rounded={"full"} w={"10px"} h={"10px"} bg={"#FBBE2F"}></Box>
									<Box rounded={"full"} w={"10px"} h={"10px"} bg={"#29CD3F"}></Box>
								</Flex>
							</Flex>
							<Flex mt={"-50px"} className='aboutText' gap={5} flexDirection={"column"}>
								<Text color={"white"} mx={20} mt={20}>
									{
										"> Hello! my name is William Salas, I'm 23 years old and i live in Barranquilla, Colombia. I'm a Full Stack Developer with training as an Architect and Graphic Designer. I Have experience working in React, Redux, Node, Express, MongoDB among other technologies commonly used in the market."
									}
								</Text>

								<Text className='lastText' color={"white"} mx={20}>
									{
										"I'm a realy easygoing person, willing to help others as much as eager to request help if needed, i'm a self-instructed musician and i love gaming in my free "
									}
								</Text>
								<Input
									value={command}
									onChange={(e) => {
										setCommand(e.target.value);
									}}
									onKeyPress={handleCommand}
									variant={"unstyled"}
									border={"none"}
									placeholder="> type 'npm run dev' to download my cv, press enter to run"
									size={"sm"}
									color={"white"}
									className='commandLine'
									mx={20}
									pb={5}
									w={"70%"}
								></Input>
							</Flex>
						</Flex>
					</GridItem>
					<GridItem
						border={"solid 1px grey"}
						borderRadius={"10px"}
						gridArea={"c"}
						color={"white"}
						overflowY={"scroll"}
						overflow={"auto"}
					>
						<Heading size={"md"} px={5} pt={5} color={"white"}>
							{">News"}
						</Heading>

						<Flex flexDir={"column"}>
							{news?.map((n) => {
								{
									return (
										<NewsCard
											key={n.title}
											title={n.title}
											url={n.url}
											publisher={n.source.name}
											description={n.description}
											date={n.publishedAt}
										/>
									);
								}
							})}
						</Flex>
					</GridItem>
					<GridItem
						border={"solid 1px grey"}
						borderRadius={"10px"}
						gridArea={"d"}
						overflow={"hidden"}
					>
						<Heading size={"md"} p={5} color={"white"}>
							{">myProjects"}
						</Heading>
						<Flex flexDir={"column"}>
							<Flex
								style={styleSlide}
								className='carousel'
								w={"2000px"}
								gap={"5"}
								p={"2"}
								scrollBehavior={"smooth"}
								justifyContent={"flex-start"}
							>
								{projects.map((p) => {
									return (
										<ProjectCard
											name={p.name}
											description={p.description}
											image={p.image}
											url={p.url}
											technologies={p.technologies}
											id={p.id}
											key={p.id}
										/>
									);
								})}
							</Flex>
							<HStack justifyContent={"center"}>
								<IconButton
									rounded={"full"}
									size={"lg"}
									variant={"ghost"}
									color={"grey"}
									icon={<MdKeyboardArrowLeft />}
									onClick={slideLeft}
								/>
								<IconButton
									size={"lg"}
									rounded={"full"}
									variant={"ghost"}
									color={"grey"}
									icon={<MdKeyboardArrowRight />}
									onClick={slideRight}
								/>
							</HStack>
						</Flex>
					</GridItem>
					<GridItem border={"solid 1px grey"} borderRadius={"10px"} gridArea={"e"}>
						<Flex flexDir={"column"}>
							<Heading size={"md"} p={5} color={"white"}>
								{">mySkills"}
							</Heading>
							<Flex justifyContent={"center"} p={"5%"}>
								<VStack spacing={5}>
									<Flex gap={"3"} flexDir={"row"}>
										<Icon boxSize={iconSize} color='cyan' as={FaReact} />
										<Icon boxSize={iconSize} color='white' as={SiNextdotjs} />
										<Icon boxSize={iconSize} color='green' as={FaNodeJs} />
										<Icon boxSize={iconSize} color='white' as={SiExpress} />
									</Flex>
									<Flex gap={"3"} flexDir={"row"}>
										<Icon boxSize={iconSize} color='green' as={SiMongodb} />
										<Icon boxSize={iconSize} color='#52b0e7' as={SiSequelize} />
										<Icon boxSize={iconSize} color='#277ac0' as={SiTypescript} />
										<Icon boxSize={iconSize} color='purple' as={SiRedux} />
									</Flex>
									<Flex gap={"3"} flexDir={"row"}>
										<Icon boxSize={iconSize} color='yellow' as={SiJavascript} />
										<Icon boxSize={iconSize} color='orange' as={SiHtml5} />
										<Icon boxSize={iconSize} color='#277ac0' as={SiCss3} />
										<Icon boxSize={iconSize} color='#e84e31' as={SiGit} />
									</Flex>
								</VStack>
							</Flex>
						</Flex>
					</GridItem>
				</Grid>
			</Box>
		</>
	);
}

export async function getServerSideProps() {
	const [response, projects, news] = await Promise.all([
		fetch(`${NEXT_URL}/image`),
		fetch(`${NEXT_URL}/projects`),
		fetch(`${NEXT_URL}/news`),
	]);

	const [data, projectsData, newsData] = await Promise.all([
		response.json(),
		projects.json(),
		news.json(),
	]);

	return { props: { url: data.url, projects: projectsData, news: newsData } };
}
